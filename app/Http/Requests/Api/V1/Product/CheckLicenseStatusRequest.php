<?php

namespace App\Http\Requests\Api\V1\Product;

use Illuminate\Foundation\Http\FormRequest;

/**
 * Check License Status Request
 * 
 * Validates the request data for checking license status and entitlements.
 * This endpoint allows end-user products to validate licenses and check seat availability.
 * 
 * **Authentication**: This endpoint does not require authentication. It is designed for end-user products
 * to check license status without needing to authenticate with the system.
 * 
 * @bodyParam license_key string required The license key to check. Must be a valid license key string that was previously generated by a brand. This key is used to identify the customer and their associated licenses. Maximum 255 characters. Example: "LK-ABC123-DEF456", "brand_38HbCf8N5qlPeHHYTOi4p54N48P7vRFV", "X2jorWI2WasRsbMIudKmTbqmWBvN6HEa"
 * @bodyParam instance_id string nullable The instance ID to check against (for seat validation). If provided, this endpoint will check if the specific instance is currently activated and consuming a seat. This is useful for products that need to verify their current activation status. Maximum 255 characters. Example: "site-123", "machine-abc", "wordpress-site-1"
 */
class CheckLicenseStatusRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     * 
     * @return bool
     */
    public function authorize(): bool
    {
        // This endpoint is public and does not require authentication
        // It is designed for end-user products to check license status
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'license_key' => 'required|string|max:255',
            'instance_id' => 'nullable|string|max:255',
        ];
    }

    /**
     * Get custom messages for validator errors.
     *
     * @return array<string, string>
     */
    public function messages(): array
    {
        return [
            'license_key.required' => 'License key is required.',
            'license_key.string' => 'License key must be a string.',
            'license_key.max' => 'License key may not be greater than 255 characters.',
            'instance_id.string' => 'Instance ID must be a string.',
            'instance_id.max' => 'Instance ID may not be greater than 255 characters.',
        ];
    }

    /**
     * Get custom attributes for validator errors.
     *
     * @return array<string, string>
     */
    public function attributes(): array
    {
        return [
            'license_key' => 'license key',
            'instance_id' => 'instance ID',
        ];
    }
}
